<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2017/07 on Leonidas Simopoulos's blog</title><link>https://lsimopoulos.github.io/archives/2017/07/</link><description>Recent content in 2017/07 on Leonidas Simopoulos's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://lsimopoulos.github.io/archives/2017/07/index.xml" rel="self" type="application/rss+xml"/><item><title>Android: Client not ready yet</title><link>https://lsimopoulos.github.io/post/android_error_client_not_ready_yet/</link><pubDate>Thu, 20 Jul 2017 22:13:55 +0200</pubDate><guid>https://lsimopoulos.github.io/post/android_error_client_not_ready_yet/</guid><description>I started developing an android app on my surface but then I decided to move the code to my stationary pc. I copied the whole source on a USB stick and pasted it on the other pc. I started the Android Studio and got an error dialog that it was warning me that the android sdk root path(that it was declared on the project) is not valid and I was propmpted to verify so the Android Studio points to the actual and correct path.</description></item><item><title>Injecting classes that inherit from a generic one in Autofac</title><link>https://lsimopoulos.github.io/post/injecting_generic_class_in_autofac/</link><pubDate>Sun, 16 Jul 2017 19:47:48 +0200</pubDate><guid>https://lsimopoulos.github.io/post/injecting_generic_class_in_autofac/</guid><description>Lets say we have a generic class defined like :
public class Foundation&amp;lt;TClass&amp;gt; where TClass : class
{
private readonly InjectedClass _injectedClass;
protected Foundation(InjectedClass injectedClass)
{
_injectedClass = injectedClass;
}
} Autofac has a method : RegisterGeneric() we can use in order to register generic classes.
Usage :
builder.RegisterGeneric(typeof(Foundation&amp;lt;&amp;gt;)).InstancePerLifetimeScope(); This works perfectly but what about the classes that inherit from this generic class? For example:
public class CustomFoundation&amp;lt;TClass&amp;gt; : Foundation&amp;lt;TClass&amp;gt; where TClass :class
{
public CustomFoundation(InjectedClass injectedClass) : base(injectedClass)
{
}
} Using &amp;ldquo;RegisterGeneric()&amp;rdquo; wont work.</description></item><item><title>Create GUID: The command is not a valid executable</title><link>https://lsimopoulos.github.io/post/createguid_not_valid_command_error/</link><pubDate>Sat, 15 Jul 2017 22:08:32 +0200</pubDate><guid>https://lsimopoulos.github.io/post/createguid_not_valid_command_error/</guid><description>My hdd died two days ago and I re-installed windows 10 Pro(64 bit) and Visual Studio 2017. While I was programming today for one project I came across with the following error : &amp;ldquo;The command is not a valid executable&amp;rdquo;. I did try to find the &amp;ldquo;genguid.exe&amp;rdquo; on the path &amp;ldquo;C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\Tools&amp;quot; but the exe was not there.
I googled around and I found this site. Apparently you need to install the Desktop Developement with C++ in order the CreateGuid to work(see the above image).</description></item><item><title>Configure an Index on many properties in entity framework 6.1</title><link>https://lsimopoulos.github.io/post/entity_index_many_properties/</link><pubDate>Wed, 05 Jul 2017 19:02:53 +0200</pubDate><guid>https://lsimopoulos.github.io/post/entity_index_many_properties/</guid><description>There are few ways to configure an Index on more than one property in the entity framework 6.1. I created a new WebApplication project from Visual Studio and I selected MVC.
1.Attributes
For this tutorial I am going to create two models: Server and Instance.
public class Server
{
public int Id { get; set; }
public string Name { get; set; }
}
public class Instance
{
public int Id { get; set; }
public string Name { get; set; }
} Modify the ApplicationUser class: public class ApplicationUser : IdentityUser
{
public async Task&amp;lt;ClaimsIdentity&amp;gt; GenerateUserIdentityAsync(UserManager&amp;lt;ApplicationUser&amp;gt; manager)
{
// Note the authenticationType must match the one defined in CookieAuthenticationOptions.</description></item><item><title>Integrate Autofac with MVVM Light</title><link>https://lsimopoulos.github.io/post/integrating_autofac_with_mvvmlight/</link><pubDate>Mon, 03 Jul 2017 20:11:26 +0200</pubDate><guid>https://lsimopoulos.github.io/post/integrating_autofac_with_mvvmlight/</guid><description>I am going to show how to integrate Autofac with the Mvvm Light easy and quickly for most simple scenarios. Autofac is very powerful IOC Container and MVVM Light is one of the best MVVM frameworks.
1.Create a new project from mvvm light templates in the visual studio
2.Install Autofac and Autofac.Extras.CommonServiceLocator as NuGet packages.
3.Expand the folder ViewModel on the SolutionExplorer in the Visual Studio and open the file ViewModelLocator.</description></item></channel></rss>