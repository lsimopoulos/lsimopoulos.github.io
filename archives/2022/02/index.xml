<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2022/02 on Leonidas Simopoulos's blog</title><link>https://lsimopoulos.github.io/archives/2022/02/</link><description>Recent content in 2022/02 on Leonidas Simopoulos's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://lsimopoulos.github.io/archives/2022/02/index.xml" rel="self" type="application/rss+xml"/><item><title>MessagePack and HttpClient</title><link>https://lsimopoulos.github.io/post/messagepack_httpclient/</link><pubDate>Tue, 22 Feb 2022 13:33:00 +0200</pubDate><guid>https://lsimopoulos.github.io/post/messagepack_httpclient/</guid><description>Controller method public async Task&amp;lt;IActionResult&amp;gt; SomeApiMethod()
{
try
{
using var ms = new MemoryStream();
await Request.Body.CopyToAsync(ms);
var someClass = MessagePackSerializer.Deserialize&amp;lt;SomeClass&amp;gt;(ms.ToArray());
//do something
} catch (Exception e)
{
return BadRequest(e.Message);
}
return Ok();
} HttpClient posts a class using MessagePack for serialization using var scope = serviceProvider.CreateScope();
var httpClientFactory = scope.ServiceProvider.GetService&amp;lt;IHttpClientFactory&amp;gt;();
var httpClient = httpClientFactory.CreateClient();
var someClass = new SomeClass();
var data = MessagePackSerializer.Serialize(someClass);
var byteArrayContent = new ByteArrayContent(data);
await httpClient.</description></item><item><title>Let's encrypt and certbot</title><link>https://lsimopoulos.github.io/post/letsnecrypt_certbot/</link><pubDate>Wed, 16 Feb 2022 09:00:00 +0200</pubDate><guid>https://lsimopoulos.github.io/post/letsnecrypt_certbot/</guid><description> Obtain certificate from Let&amp;rsquo;s Encrypt using Certbot in STANDALONE mode As one line
sudo docker run -it --rm -p 443:443 -p 80:80 -v /home/user/someFolder/etc/letsencrypt:/etc/letsencrypt -v /home/user/someFolder/var/lib/letsencrypt:/var/lib/letsencrypt -v /home/user/someFolder/var/log/letsencrypt:/var/log/letsencrypt certbot/certbot certonly --email your.email@email.com --agree-tos --no-eff-email --rsa-key-size 4096 --authenticator standalone -d yourDnsName or with line breaks
sudo docker run -it --rm -p 443:443 -p 80:80 \
-v /home/user/someFolder/etc/letsencrypt:/etc/letsencrypt \
-v /home/user/someFolder/var/lib/letsencrypt:/var/lib/letsencrypt \
-v /home/user/someFolder/var/log/letsencrypt:/var/log/letsencrypt \
certbot/certbot certonly \
--email your.email@email.com --agree-tos --no-eff-email \
--rsa-key-size 4096 --authenticator standalone -d yourDnsName</description></item><item><title>GIT hacks</title><link>https://lsimopoulos.github.io/post/git_hacks/</link><pubDate>Tue, 15 Feb 2022 15:30:00 +0200</pubDate><guid>https://lsimopoulos.github.io/post/git_hacks/</guid><description> fatal: in unpopulated submodule &amp;lsquo;x&amp;rsquo; git rm --cached x
git submodule add -b master --force https://gitlink/repo.git x where x : the name of the submodule
delete pushed commit on the remote branch git reset --hard &amp;lt;last_working_commit_id
git push --force revert a change of speicifc file that is commited git checkout commitId -- src/path/somefile</description></item></channel></rss>